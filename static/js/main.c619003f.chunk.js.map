{"version":3,"sources":["logo.svg","components/Node.js","components/helper.js","components/BoxContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Component","generateColors","num","colors","i","h","Math","floor","random","push","sort","array","animations","auxillaryArray","slice","iters","length","swapped","swap","bubbleSort","firstIndex","secondIndex","temp","getMergeSortAnimations","mergeSort","startIndex","endIndex","middleIndex","sortArray","j","merge","arraysAreEqual","firstArray","secondArray","getQuickSortAnimations","quickSort","javaScriptSortedArray","a","b","console","log","pivotIndex","min","max","lessTailIndex","partitionArray","getSelectionSortAnimations","N","minIndex","selectionSort","getheapSortAnimations","siftDown","buildMaxHeap","currentIndex","heap","childOneIndex","childTwoIndex","indexToSwap","window","innerWidth","innerHeight","SECONDARY_COLOR","BoxContainer","props","handleChange","target","setState","name","value","reload","state","bg","speed","this","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","barOneInx","key","insertionSort","getInsert","className","position","right","map","idx","title","id","top","left","borderRadius","onClick","heapSort","Fragment","htmlFor","type","onChange","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c619003f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport './Node.css';\r\nimport React,{ Component,useState } from 'react'\r\nimport {sorting} from './sorting';\r\n\r\nexport class Node extends Component{\t\r\nrender(){\r\n    \r\n\treturn (\r\n\t<div>\r\n\t<div className=\"mymove\"\r\n    \r\n\tstyle={{backgroundColor:this.props.bg,\r\n\t\t\t\twidth:this.props.color}}\r\n\t></div>\r\n\t\r\n\t </div>\r\n\t)\r\n\t\r\n}\r\n}\r\n\r\n export default Node;\r\n","\r\nimport './Node.css';\r\n\r\n\r\n    const generateColors = (num) => {\r\n    \r\n    let colors = [];\r\n    for(let i=0; i<num; i++){\r\n        let h = Math.floor(Math.random() * 450);\r\n        colors.push(h);\r\n        \r\n    }\r\n    return (colors);\r\n    }\r\n    \r\n\r\nexport function sort(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    //const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    let iters = N - 1;\r\n    while(iters > 0) {\r\n        let swapped = false;\r\n        for(let i = 0; i < iters; ++i) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if(auxillaryArray[i] < auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\t\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if(startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        //Comparing value at ith and jth index so push them to change their color\r\n        animations.push([\"comparision1\", i, j]);\r\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n        animations.push([\"comparision2\", i, j]);\r\n        if(auxillaryArray[i] >= auxillaryArray[j]) {\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([\"comparision1\", i, i]);\r\n        animations.push([\"comparision2\", i, i]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while(j <= endIndex) {\r\n        animations.push([\"comparision1\", j, j]);\r\n        animations.push([\"comparision2\", j, j]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        animations.push([\"comparision1\", i, i - startIndex]);\r\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\r\n        animations.push([\"comparision2\", i, i - startIndex]);\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\nexport function getInsert(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] < key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\r\n    \r\n    animations.push([\"comparision1\", pivotIndex, endIndex]);\r\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\r\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n\r\n    let lessTailIndex = startIndex;\r\n\r\n    for(let i = startIndex; i < endIndex; ++i) {\r\n        animations.push([\"comparision1\", i, endIndex]);\r\n        animations.push([\"comparision2\", i, endIndex]);\r\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\r\n            animations.push([\"comparision1\", i, lessTailIndex]);\r\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\r\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\r\n            animations.push([\"comparision2\", i, lessTailIndex]);\r\n            swap(auxillaryArray, i, lessTailIndex);\r\n            lessTailIndex++;\r\n        }\r\n    }\r\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\r\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\r\n    \r\n    swap(auxillaryArray, lessTailIndex, endIndex);\r\n    return lessTailIndex;\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    export function getheapSortAnimations(array) {\r\n        const animations = [];\r\n        buildMaxHeap(array, animations);\r\n        for (let endIndex = array.length-1; endIndex >= 0; endIndex--) {\r\n          animations.push([0, endIndex, array[0], array[endIndex]]);\r\n         //animations.push([\"swap\", 0, endIndex]); \r\n         swap(array,0, endIndex);\r\n          siftDown(0, endIndex - 1, array, animations);\r\n        }\r\n        // return array;\r\n        return [animations,array];\r\n      }\r\n      function buildMaxHeap(array, animations) {\r\n        const lastParentIndex = Math.floor((array.length - 1) / 2);\r\n        for (let i = lastParentIndex; i >= 0; i--) {\r\n          siftDown(i, array.length - 1, array, animations);\r\n        }\r\n      }\r\n      function siftDown(currentIndex, endIndex, heap, animations) {\r\n        let childOneIndex = currentIndex * 2 + 1;\r\n        while (childOneIndex <= endIndex) {\r\n           animations.push([childOneIndex, endIndex, -1, -1]);\r\n          animations.push([childOneIndex, endIndex, -1, -1]);\r\n        //animations.push([\"comparision1\", childOneIndex, endIndex]);\r\n        //animations.push([\"comparision2\", childOneIndex, endIndex]);\r\n          let childTwoIndex =\r\n            currentIndex * 2 + 2 <= endIndex ? currentIndex * 2 + 2 : -1;\r\n          let indexToSwap;\r\n          if (childTwoIndex !== -1 && heap[childTwoIndex] > heap[childOneIndex]) {\r\n            indexToSwap = childTwoIndex;\r\n          } else {\r\n            indexToSwap = childOneIndex;\r\n          }\r\n          if (heap[indexToSwap] > heap[currentIndex]) {\r\n            animations.push([\r\n              currentIndex,\r\n              indexToSwap,\r\n              heap[currentIndex],\r\n              heap[indexToSwap]\r\n            ]);\r\n           // animations.push([\"swap\", heap[indexToSwap], heap[currentIndex]]);\r\n            swap(heap,currentIndex, indexToSwap);\r\n            currentIndex = indexToSwap;\r\n            childOneIndex = currentIndex * 2 + 1;\r\n          } else {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    export {  generateColors }\r\n    ","import React,{ Component,currentState } from 'react'\r\nimport './Node.css';\r\nimport {Node} from './Node';\r\nimport { rgbValue, generateColors, sort,getheapSortAnimations, getMergeSortAnimations ,getInsert,getQuickSortAnimations,getSelectionSortAnimations} from './helper'\r\n\r\n\r\n\r\nlet WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\n\r\n\r\n\r\nconst SECONDARY_COLOR = 'red'; \r\n\r\nexport class BoxContainer extends Component{\r\n\r\nstatic defaultProps = {\r\n\tnum : 250,\r\n\t\r\n}\r\nconstructor(props){\r\n\tsuper(props)\r\n\tthis.state = {\r\n\tcolors : generateColors(this.props.num),\r\n\tbg:\"green\",\r\n    speed:0.5,\r\n    \r\n\t}\t\r\n}\r\n\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({ [target.name]: target.value });\r\n };\r\n\r\n\r\n  reload = (colors) =>{\r\n      this.setState({colors:generateColors(this.props.num)});\r\n      \r\n  }\r\n\r\n\r\n  bubbleSort() {\r\n\r\n    const [animations,sortArray] = sort(this.state.colors);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n            const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            \r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.speed);\r\n        }\r\n        else {\r\n            const [swap,barIndex, newHeight] = animations[i];\r\n            if (barIndex === -1) {\r\n                continue;\r\n            }\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * this.state.speed);  \r\n        }\r\n    }\r\n     \r\n}\r\n\r\n\r\n\r\n// mergeSort() {\r\n\r\n//     const [animations,sortArray] = getMergeSortAnimations(this.state.colors);\r\n//     for (let i = 0; i < animations.length; i++) {\r\n//         const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n//         const arrayBars = document.getElementsByClassName('array-bar');\r\n//         if(isColorChange === true) {\r\n//             const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n//             const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n//             const barOneStyle = arrayBars[barOneIndex].style;\r\n//             const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            \r\n//             setTimeout(() => {\r\n//                 barOneStyle.backgroundColor = color;\r\n//                 barTwoStyle.backgroundColor = color;\r\n//             },i * this.state.speed);\r\n//         }\r\n//         else {\r\n//             const [swap,barIndex, newHeight] = animations[i];\r\n//             if (barIndex === -1) {\r\n//                 continue;\r\n//             }\r\n//             const barStyle = arrayBars[barIndex].style;\r\n//             setTimeout(() => {\r\n//                 barStyle.height = `${newHeight}px`;\r\n//             },i * this.state.speed);  \r\n//         }\r\n//     }\r\n     \r\n// }\r\n\r\nmergeSort() {\r\n    \r\n    const [animations,sortArray] = getMergeSortAnimations(this.state.colors);\r\n    \r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n            const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.speed);\r\n            \r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                const [swap, barOneInx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneInx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              },i * this.state.speed);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ninsertionSort() {\r\n    \r\n    const [animations,sortArray] = getInsert(this.state.colors);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n            const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.speed);\r\n        }\r\n        else {\r\n            const [temp, barIndex, newHeight] = animations[i];\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * this.state.speed);  \r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nquickSort() {\r\n    \r\n    const [animations,sortArray] = getQuickSortAnimations(this.state.colors);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n            const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.speed);\r\n        }\r\n        else {\r\n            const [swap, barIndex, newHeight] = animations[i];\r\n            if (barIndex === -1) {\r\n                continue;\r\n            }\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * this.state.speed);  \r\n        }        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    selectionSort() {\r\n        \r\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.colors);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * this.state.speed);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * this.state.speed);  \r\n            }\r\n        }\r\n    } \r\n\r\n\r\n\r\n\r\n\r\n    heapSort() {\r\n        \r\n        const [animations,sortArray] = getheapSortAnimations(this.state.colors);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : this.state.bg;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * this.state.speed);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * this.state.speed);  \r\n            }\r\n        }\r\n    } \r\nrender() {\r\n  const array = this.state.colors;\r\n  const SORT_BUTTONS = 6;\r\n  const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\r\n  return(\r\n      <>\r\n       <div className=\"node\">\r\n      <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\r\n          {array.map((value, idx) => (\r\n              <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                  backgroundColor: this.state.bg,\r\n                  height: `${value}px`\r\n                  }}\r\n              ></div>\r\n          ))}\r\n      </div>\r\n      </div>\r\n      <div className=\"button\" > \r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.bubbleSort()}>\r\n              Bubble Sort\r\n          </button>\r\n          <div>\r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.mergeSort()}>\r\n              Merge Sort\r\n          </button>\r\n          </div>\r\n          <div>\r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.insertionSort()}>\r\n              Insertion Sort\r\n          </button>\r\n          </div>\r\n          <div>\r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.quickSort()}>\r\n              Quick Sort\r\n          </button>\r\n          </div>\r\n          <div>\r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.selectionSort()}>\r\n              Selection Sort\r\n          </button>\r\n          </div>\r\n          <div>\r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.heapSort()}>\r\n              Heap Sort\r\n          </button>\r\n          </div>\r\n          <div>\r\n          <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:\"200px\",backgroundColor:\"black\",color:\"white\",left:\"1000px\",borderRadius:\"20px\"}} onClick={() => this.reload(this.state.colors)}>\r\n              Restart\r\n          </button>\r\n          </div>\r\n    \r\n      </div>\r\n    \r\n<div className=\"button2\">\r\n<React.Fragment>\r\n          <form>\r\n            <label htmlFor=\"speed\">Animation Speed</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"speed\"\r\n              //value={this.state.speed}\r\n              onChange={this.handleChange}\r\n            />\r\n           \r\n          </form>\r\n          \r\n          <h3>Speed: {this.state.speed + 0.5}</h3>\r\n        </React.Fragment>\r\n\r\n</div>\r\n      </>\r\n  );\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport {Node, sort,Counter} from './components/Node';\nimport {BoxContainer,BoxContainerr} from './components/BoxContainer';\nimport {sorting} from './components/sorting';\n\n\nconst reload = () =>{\n  window.location.reload(false);\n}\n\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <div className=\"head\">\n      <h1>SORTING VISUALIZER</h1>\n      </div>\n      <br></br>\n      <BoxContainer/>\n      \n    </div>\n    \n  );\n}\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}